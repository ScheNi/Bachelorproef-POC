<?phpinclude_once "Autoloader.php";$atomic_run_state = true;declare(ticks=1);function sig_handler($signo){    global $thread_slots, $atomic_run_state, $tbl, $ssl_resumption;    switch ($signo) {        case SIGINT:            $atomic_run_state = false;            foreach ($thread_slots as $thread) {                $thread->stop();                $thread->join();            }            $writer = new StatisticsWriter("stats", $ssl_resumption==true?"resumption":"full_handshake");            $writer->write($tbl->getTable());            exit;            break;    }}pcntl_signal(SIGINT, "sig_handler");/** * Get arguments */$max_threads = 1;$ip_address = "192.168.0.171";$ssl_resumption = false;foreach ( $argv as $arg ){    $cmd = explode("=", $arg );    if ( count( $cmd ) == 2 )    {        if ( $cmd[0] == "thread-count" )        {            $max_threads = intval( $cmd[1] );        } else if($cmd[0] == "ip-address") {            $ip_address = $cmd[1];        }    }    else    {        if ( $cmd[0] == "tls-resumption" )        {            $ssl_resumption = true;        }    }}/** * Start threads */$counter_factory = new CounterFactory();$worker_factory = new WorkerFactory();$counter_slots = [];$thread_slots = [];for ( $thread_count = 0; $thread_count < $max_threads; $thread_count++ ){    /* Create a new counter and remember it in the vector of all     * individual counters. */    $counter_slots[ $thread_count ] = $counter_factory->make();	/* Create a new thread and pass it a reference to its individual	 * counter  */    $thread_slots[ $thread_count ] = $worker_factory->makeWorker($ssl_resumption, $counter_slots[$thread_count],$ip_address);    /* Start the thread to let it run "forever" (actually until the     * atomic_run_state variable becomes false) */	$thread_slots[ $thread_count ]->start();}$tbl = new Console_Table(10);$tbl->setHeaders(    array('DATE', 'TIME', 'NUM_T', 'TOT_CONN', 'CONNECT', 'TOT_SUCC', 'SUCCEED', 'TOT_FAIL', 'FAILED', 'AVG', 'C-50', 'C-100', 'C-200', 'C-500', 'C-MORE'));$total = new TotalCounter();while($atomic_run_state) {    $start_timer = microtime(true);    foreach($counter_slots as $counter_group) {        $total->accumulate($counter_group, $thread_count);    }    $tbl->addRow($total->printData());    passthru('clear');    echo  $tbl->getTable();    $stop_timer = microtime(true);    usleep(1000000 - ($stop_timer - $start_timer));}